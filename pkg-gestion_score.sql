create or replace PACKAGE GESTION_SCORE AS 

  TYPE SCORES_REF IS REF CURSOR;

  PROCEDURE INSERER_SCORES(
    pCodeCategorie in categories.codecategorie%type, 
    pAlias in joueurs2.alias%type);
    
  procedure INIT_SCORES(
    pAlias in joueurs2.alias%type, 
    pCodeCat in categories.codecategorie%type);

  FUNCTION LISTER_SCORES_JOUEUR(pAlias in joueurs2.alias%type) RETURN SCORES_REF;
  
  FUNCTION SCORES_JOUEUR_SELON_CATEGORIE(
    pAlias in joueurs2.alias%type, 
    pCodeCategorie in categories.codecategorie%type) 
    RETURN SCORES_REF;
    
  FUNCTION LISTE_GAGNEE (PALIAS IN JOUEURS2.ALIAS%TYPE) RETURN SCORES_REF;
  
  FUNCTION LISTE_CATEGORIES_RESTANTES(PALIAS IN JOUEURS2.ALIAS%TYPE) RETURN SCORES_REF;
  
  PROCEDURE PURGER_SCORES;
  
  FUNCTION LISTE_CATEGORIES_PLUS_FAIBLE (PALIAS IN JOUEURS2.ALIAS%TYPE) RETURN SCORES_REF;
  
  FUNCTION LISTE_CATEGORIES_PLUS_FORTE (PALIAS IN JOUEURS2.ALIAS%TYPE) RETURN SCORES_REF;

END GESTION_SCORE;




create or replace PACKAGE BODY GESTION_SCORE AS

  PROCEDURE INSERER_SCORES(
    pCodeCategorie in categories.codecategorie%type, 
    pAlias in joueurs2.alias%type) AS
    EXISTE_DEJA INT := 0;
    SCORE_EXISTANT INT := 1;
  BEGIN
    SELECT COUNT(*) INTO EXISTE_DEJA FROM SCORES WHERE ALIAS = pAlias AND CODECATEGORIE = pCodeCategorie;
    IF(EXISTE_DEJA > 0) THEN
      SELECT SCORE INTO SCORE_EXISTANT FROM SCORES WHERE ALIAS = pAlias AND CODECATEGORIE = pCodeCategorie;
      UPDATE SCORES SET SCORE = ((SCORE_EXISTANT)+1) WHERE ALIAS = pAlias AND CODECATEGORIE = pCodeCategorie;
    ELSE 
      INSERT INTO SCORES VALUES (pCodeCategorie, pAlias, 1);
      END IF;
  END INSERER_SCORES;

  PROCEDURE PURGER_SCORES AS
  BEGIN
   DELETE FROM SCORES;
   commit;
  END PURGER_SCORES;

  procedure INIT_SCORES(pAlias in joueurs2.alias%type, pCodeCat in categories.codecategorie%type) as
  begin
    insert into scores values(pCodeCat, pAlias, 0);
    commit;
  end;


  FUNCTION LISTER_SCORES_JOUEUR(pAlias in joueurs2.alias%type) RETURN SCORES_REF AS
  SCORES SCORES_REF;
  BEGIN
    OPEN SCORES FOR SELECT * FROM SCORES WHERE ALIAS = pAlias;
    RETURN SCORES;
  END LISTER_SCORES_JOUEUR;

  FUNCTION SCORES_JOUEUR_SELON_CATEGORIE(pAlias in joueurs2.alias%type, pCodeCategorie in categories.codecategorie%type) RETURN SCORES_REF AS
  SCORES SCORES_REF;
  BEGIN
    OPEN SCORES FOR SELECT * FROM SCORES WHERE ALIAS = pAlias AND CODECATEGORIE = pCodeCategorie;
    RETURN SCORES;
  END SCORES_JOUEUR_SELON_CATEGORIE;
  
  
  
  FUNCTION LISTE_CATEGORIES_RESTANTES(PALIAS IN JOUEURS2.ALIAS%TYPE) RETURN SCORES_REF AS
  LISTE SCORES_REF;
  BEGIN
  open liste for 
    SELECT j.nom, j.prenom, NOMCATEGORIE FROM SCORES S 
    INNER JOIN JOUEURS2 J ON S.ALIAS = J.ALIAS 
    INNER JOIN CATEGORIES C ON C.CODECATEGORIE = S.CODECATEGORIE
    WHERE SCORE < 5 and s.codecategorie not in (select codecategorie from scores where score >= 5) and s.alias = palias;
    RETURN LISTE;
  END;
  
  FUNCTION LISTE_GAGNEE (PALIAS IN JOUEURS2.ALIAS%TYPE) RETURN SCORES_REF AS
  LISTE SCORES_REF;
  BEGIN
    open liste for SELECT j.nom, j.prenom, NOMCATEGORIE FROM SCORES S 
    INNER JOIN JOUEURS2 J ON S.ALIAS = J.ALIAS 
    INNER JOIN CATEGORIES C ON C.CODECATEGORIE = S.CODECATEGORIE
    WHERE SCORE >= 5 AND S.ALIAS = PALIAS;
    RETURN LISTE;
  END;
  
  FUNCTION LISTE_CATEGORIES_PLUS_FAIBLE (PALIAS IN JOUEURS2.ALIAS%TYPE) RETURN SCORES_REF AS
  LISTE SCORES_REF;
  BEGIN
    open liste for SELECT * FROM (
    SELECT C.CODECATEGORIE, SCORE, ALIAS, NOMCATEGORIE FROM SCORES S 
    INNER JOIN CATEGORIES C ON S.CODECATEGORIE = C.CODECATEGORIE 
    WHERE ALIAS =  PALIAS ORDER BY SCORE ASC) 
    WHERE ROWNUM = 1;
    RETURN LISTE;
  END;
  
  FUNCTION LISTE_CATEGORIES_PLUS_FORTE (PALIAS IN JOUEURS2.ALIAS%TYPE) RETURN SCORES_REF AS
  LISTE SCORES_REF;
  BEGIN
    open liste for SELECT * FROM (
    SELECT C.CODECATEGORIE, SCORE, ALIAS, NOMCATEGORIE FROM SCORES S 
    INNER JOIN CATEGORIES C ON S.CODECATEGORIE = C.CODECATEGORIE 
    WHERE ALIAS =  PALIAS ORDER BY SCORE DESC) 
    WHERE ROWNUM = 1;
    RETURN LISTE;
  END;

END GESTION_SCORE;